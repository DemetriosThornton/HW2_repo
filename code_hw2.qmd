---
title: "Homework 2 by Demetrios Thornton"
format: html
editor: visual
---

# Question 2

```{r}
library(readxl)
library(igraph)
library(tidygraph)
library(ggraph)

adj <- read_excel("dataFigueroa.xlsx", col_names = TRUE)
adj <- as.data.frame(adj)
rownames(adj) <- adj[[1]]
adj <- adj[ , -1]
adj <- as.matrix(adj)
g <- graph_from_adjacency_matrix(adj, mode = "undirected", diag = FALSE)
tg <- as_tbl_graph(g)
ggraph(tg, layout = "fr") +  
  geom_edge_link(color = "gray80") +
  geom_node_point(color = "orange", size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  ggtitle("Undirected Network")
     main = "Cleaned Up Network Plot"
write_graph(g, file = "network_output.graphml", format = "graphml")
```

-   Use the Louvain and Leiden algorithm , and present a plot of both results. Which one should be chosen?

```{r}
library(readxl)
library(igraph)
library(tidygraph)
library(ggraph)
library(patchwork)

adj <- read_excel("dataFigueroa.xlsx")  
adj <- as.data.frame(adj)
rownames(adj) <- adj[[1]]
adj <- adj[ , -1]
adj <- as.matrix(adj)

g <- graph_from_adjacency_matrix(adj, mode = "undirected", diag = FALSE)

tg <- as_tbl_graph(g)

tg_louvain <- tg %>% mutate(louvain = as.factor(group_louvain()))
tg_leiden  <- tg %>% mutate(leiden = as.factor(group_leiden()))

plot_louvain <- ggraph(tg_louvain, layout = "fr") +
  geom_edge_link(color = "gray80") +
  geom_node_point(aes(color = louvain), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  ggtitle("Louvain Community Detection")

plot_leiden <- ggraph(tg_leiden, layout = "fr") +
  geom_edge_link(color = "gray80") +
  geom_node_point(aes(color = leiden), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  ggtitle("Leiden Community Detection")

plot_louvain + plot_leiden
```

The Leiden plot should be chosen. The results are very meaningful and the Leiden plot detected far more communities than Louvain. This means that Louvain may have been grouping communities with weak connections.

# Question 3

```{r}
library(readxl)
library(igraph)
library(tidygraph)
library(ggraph)
library(dplyr)

file_path <- "SeattleTopData.xlsx"
edges <- read_excel(file_path, sheet = "edges")
attributes <- read_excel(file_path, sheet = "attributes")

colnames(edges) <- tolower(colnames(edges))
colnames(attributes) <- tolower(colnames(attributes))

edges <- edges %>% rename(from = source, to = target)

attributes <- attributes %>%
  mutate(gender = ifelse(male == 1, "male", "female")) %>%
  rename(name = name) %>%
  select(name, gender)

g <- graph_from_data_frame(d = edges, vertices = attributes, directed = TRUE)
tg <- as_tbl_graph(g)

ggraph(tg, layout = "kk") +
  geom_edge_link(arrow = arrow(length = unit(3, 'mm')),
                 end_cap = circle(2, 'mm'),
                 edge_colour = "gray60",
                 edge_alpha = 0.3) +
  geom_node_point(aes(color = gender), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  scale_color_manual(values = c("male" = "lightblue", "female" = "lightpink")) +
  theme_void() +
  labs(title = "Directed Network: Nodes Colored by Gender")

write_graph(g, file = "seattle_network.graphml", format = "graphml")
```

-   Use the Louvain and Leiden algorithm. Did any of them work?

-   If it did not work, choose two other algorithms, and plot the result. Which one should be chosen from the two algorithms you chose?

```{r}
library(readxl)
library(igraph)
library(tidygraph)
library(ggraph)
library(dplyr)

file_path <- "SeattleTopData.xlsx"
edges <- read_excel(file_path, sheet = "edges")
attributes <- read_excel(file_path, sheet = "attributes")

colnames(edges) <- tolower(colnames(edges))
colnames(attributes) <- tolower(colnames(attributes))

edges <- edges %>% rename(from = source, to = target)

attributes <- attributes %>%
  mutate(gender = ifelse(male == 1, "male", "female")) %>%
  select(name, gender)

g <- graph_from_data_frame(d = edges, vertices = attributes, directed = TRUE)
tg <- as_tbl_graph(g)

walktrap_clusters <- cluster_walktrap(g)
tg <- tg %>%
  mutate(community_walktrap = membership(walktrap_clusters))

ggraph(tg, layout = "kk") +
  geom_edge_link(arrow = arrow(length = unit(3, 'mm')),
                 end_cap = circle(2, 'mm'),
                 edge_colour = "gray70", edge_alpha = 0.3) +
  geom_node_point(aes(color = as.factor(community_walktrap)), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  labs(title = "Walktrap Community Detection", color = "Community")

infomap_clusters <- cluster_infomap(g)
tg <- tg %>%
  mutate(community_infomap = membership(infomap_clusters))

ggraph(tg, layout = "kk") +
  geom_edge_link(arrow = arrow(length = unit(3, 'mm')),
                 end_cap = circle(2, 'mm'),
                 edge_colour = "gray70", edge_alpha = 0.3) +
  geom_node_point(aes(color = as.factor(community_infomap)), size = 5) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  labs(title = "Infomap Community Detection", color = "Community")
```

Walktrap is the superior algorithm in this case as it clearly mapped out several communities among the Seattle Data.

# Question 4

```{r}
library(readxl)
library(igraph)
library(dplyr)

fifa <- read_excel("fifa2022.xlsx", sheet = "fifa2022")
club_attrs <- read_excel("fifa2022.xlsx", sheet = "attributes_club")
country_attrs <- read_excel("fifa2022.xlsx", sheet = "attributes_country")

edges <- fifa %>%
  select(club, nationality) %>%
  group_by(club, nationality) %>%
  summarise(weight = n(), .groups = "drop")

bipartite_graph <- graph_from_data_frame(edges, directed = FALSE)
V(bipartite_graph)$type <- bipartite_mapping(bipartite_graph)$type  # TRUE = country, FALSE = club

club_nodes <- V(bipartite_graph)[type == FALSE]$name
country_nodes <- V(bipartite_graph)[type == TRUE]$name


club_proj <- bipartite_projection(bipartite_graph, which = "false", multiplicity = TRUE)

club_attrs <- club_attrs %>%
  distinct(club, winnerCountry)

V(club_proj)$winnerCountry <- club_attrs$winnerCountry[match(V(club_proj)$name, club_attrs$club)]


country_proj <- bipartite_projection(bipartite_graph, which = "true", multiplicity = TRUE)


country_attrs <- country_attrs %>%
  distinct(country, developed)

V(country_proj)$developed <- country_attrs$developed[match(V(country_proj)$name, country_attrs$country)]

write_graph(club_proj, "club_projection.graphml", format = "graphml")
write_graph(country_proj, "country_projection.graphml", format = "graphml")

```

```{r}
library(igraph)
library(tidygraph)
library(ggraph)

# Load the graph
club_proj <- read_graph("club_projection.graphml", format = "graphml")
tg_club <- as_tbl_graph(club_proj)

# Add labels only to high-degree nodes
tg_club <- tg_club %>%
  mutate(label = ifelse(degree(tg_club) > 20, name, NA))  # adjust threshold as needed

# Plot cleaned-up version
ggraph(tg_club, layout = "kk") +
  geom_edge_link(alpha = 0.1, edge_width = 0.2) +
  geom_node_point(aes(color = as.factor(winnerCountry), size = sqrt(degree(tg_club)))) +
  geom_node_text(aes(label = label), repel = TRUE, size = 3) +
  scale_color_manual(values = c("0" = "gray80", "1" = "gold")) +
  theme_void() +
  labs(title = "Club Projection (Colored by National Champion)",
       color = "Champion Status", size = "Node Degree")
```

```{r}
library(igraph)
library(tidygraph)
library(ggraph)

# Load the graph
country_proj <- read_graph("country_projection.graphml", format = "graphml")
tg_country <- as_tbl_graph(country_proj)

# Add labels only to higher-degree countries
tg_country <- tg_country %>%
  mutate(label = ifelse(degree(tg_country) > 10, name, NA))  # tweak threshold as needed

# Plot
ggraph(tg_country, layout = "kk") +
  geom_edge_link(alpha = 0.1, edge_width = 0.2) +
  geom_node_point(aes(color = as.factor(developed), size = sqrt(degree(tg_country)))) +
  geom_node_text(aes(label = label), repel = TRUE, size = 3) +
  scale_color_manual(values = c("0" = "tomato", "1" = "skyblue")) +
  theme_void() +
  labs(title = "Country Projection (Colored by Development Status)",
       color = "Developed", size = "Node Degree")
```

1.  Use the Fifa graph, projecting only the countries (netwrom of countries), and report:

    -   Use the Girvan-Newman and Leiden algorithm, and present a plot of both results. Which one should be chosen?

```{r}
library(igraph)
library(tidygraph)
library(ggraph)

country_proj <- read_graph("country_projection.graphml", format = "graphml")
tg_country <- as_tbl_graph(country_proj)

gn_comm <- cluster_edge_betweenness(country_proj)
tg_country_gn <- tg_country %>%
  mutate(community_gn = membership(gn_comm))

leiden_comm <- cluster_leiden(country_proj)
tg_country_leiden <- tg_country %>%
  mutate(community_leiden = membership(leiden_comm))

g1 <- ggraph(tg_country_gn, layout = "kk") +
  geom_edge_link(alpha = 0.1) +
  geom_node_point(aes(color = as.factor(community_gn)), size = 4) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  labs(title = "Girvanâ€“Newman Community Detection")

g2 <- ggraph(tg_country_leiden, layout = "kk") +
  geom_edge_link(alpha = 0.1) +
  geom_node_point(aes(color = as.factor(community_leiden)), size = 4) +
  geom_node_text(aes(label = name), repel = TRUE, size = 3) +
  theme_void() +
  labs(title = "Leiden Community Detection")


print(g1)
print(g2)
```

The Leiden algorithm identified clearer, more cohesive communities and handled the network's complexity more effectively. Based on modularity and visual separation of clusters, Leiden is the preferred algorithm for this network.
